
//TODO:база

//TODO:Git-это консольная утилита(terminal),которой можно управлять командами
//TODO:Репозиторий(ваша папка с проектами)-это хранилище с данными(хранилище версий файлов проекта),бывают локальными и удаленными
//локальные репозитории хранятся на вашем компьютере,а удаленные-вне вашего компьютера(облачное хранилище)
//локальные репозиторий-самостоятельная работа,а удаленный-работа в команде над одним проектом
//доступ к репозиторию разработчики получают через веб-сервис(GitHub)


//TODO:удаленный репозиторий на GitHub. SSH-ключи
//настройка протокола SSH(Secure Shell) для GitHub
//при подключении по SSH применяют пары криптографических ключей:открытый и закрытый
//создаются данные ключи в терминале следующими командами:

1)выполняем команду: "ssh-keygen"
   //генерирует ключи

2) //терминал попросит ввести путь к файлу, в котором будут сохранены сгенерированные ключи
   //предложит сохранить ключи в файл по умолчанию,для этого нужно нажать кнопку:
   нажимаем кнопку: "enter"

3)придумываем пароль и повторяем его
	//увидим рисунок в терминале(ключи созданы успешно)

4)выводим ключи в терминал командой: "cat .ssh/id_rsa.pub"

5)копируем ключ от "ssh-rsa" включительно и до конца

6)заходим в аккаунт на GitHub, переходим в настройки>SSH and GPG keys>New SSH key

7)в key вставляем наш сгенерированный ключ

//копирование чужого репозитория - форк

//TODO:клонированиме репозитория(создать на устройстве его копию)
//при клонировании с параметрами по умолчанию получаем не только рабочие файлы,но и историю их изменений
//чтобы управлять содержимым удаленного репозитория,его нужно клонировать на свое устройство(чтобы управлять локально)

//с локальным репозиторием работаем через Git(terminal), для этого указываем базовые настройки (имя и почта):
имя:
   1)git config --global user.name "Stanislav Kuchma"
почта:
   2)git config --global user.email "stas.kuchma.86@gmail.com"

//клонируем репозиторий
   1)cd "папка с проектами"(нажимаем "Tab", из списка выбираем файл)

   2)заходим в GitHub, копируем ссылку на нужный репозиторий (в формате SSH)

   3)печатаем в терминале: "git clone "ссылка

   4)введите пароль(терминал запросит его до сравнения публичного ключа с приватным)

   5)cd go_backend_test_homework/(переходим в репозиторий)

   6)вводим команду "ls -a"

//TODO:Отображение изменений,добавление файлов:Status/Add
//версии проекта
//любой файл репозитория находится в одном из 4 состояний
1) неотслеживаемый(untracked)-новый файл
2) отслеживаемый(staged)-хранится информация,о том,какие изменения нужно добавить в файл(индексировать файл)
3) измененный(modified)-файл,который разработчик изменил
4) боевой(commited)-неизменные файлы,файлы,в которых не было изменений с последнего коммита(зафиксировать файл)

//TODO:Как залить код на GitHub

1)создаем репозиторий на GitHub

2)переходим в нужную папку("cd (путь до папки)")

3)пишем команду в терминал: "git init"(инициализирует новый репозиторий GIT и начинает отслеживание существующего каталога.)
3.1)чтобы удалить "init", прописываем команду "rm -rf .git"(удаляем репозиторий, который находится в директории git)

4)связываем локальный и удаленный репозитории: "git remote add origin + ссылка на удаленный репозиторий"

5)пишем команду "git add ."(выбор файлов из проекта,которые нужно сохранить в локальном репозитории)

6)пишем команду "git commit -m" "комментарий об изменениях"(сохранение файлов в локальном репозитории)
6.1)чтобы изменить сделанный коммит - пропишите команду "git commit --amend -m" "комментарий"

7)пишем команду "git push origin master/main(название ветки)". (пуш - отправить команду на гитхаб)

//TODO:Коммитты

1)"git status" - команда, показывающая изменения в файле

2)"git log" - команда для просмотров истории коммитов

2)"git log" "имя файла" - команда для просмотров истории коммита


3)"git show" "id нужного коммита" - команда для просмотра изменений определенного коммита
3.1)"git show" - информация о последнем коммите

4)"git checkout" "id нужного коммита(7 символов)" - команда для отката к определенному коммту


//TODO: ветки
//новая ветка создается на основе той ветки,на которой мы находились на момент ее создания

1)"git branch" - команда,показывающая доступные ветки

2)"git branch" "имя ветки" - команда, создающая ветку из той,в которой мы находимся

3)"git checkout" "имя ветки" - команда возращающая на определенную ветку

4)"git push origin" "название ветки" - опубликовать в коммит в GitHub

//TODO:Ветки
//новая ветка создается на основе той ветки,на которой мы находились на момент ее создания

1)"git branch" - команда,показывающая доступные ветки

2)"git branch" "имя ветки" - команда, создающая ветку из той,в которой мы находимся

3)"git checkout" "имя ветки" - команда возращающая на определенную ветку

4)"git push origin" "название ветки" - опубликовать в коммит в GitHub

//TODO:Слияние веток
//мёрж-слияние

1)"git branch" "имя ветки" - команда, создающая ветку

2)"git merge" "имя ветки" - команда,которая производит слияние данной ветки,на ветку,в которой мы находимся
(в виде одного коммита)

3)"git rebase" "имя ветки" - команда, которая перемещает все коммиты из выделенной ветки в ту,в которой сейчас находимся

//TODO:Пул реквест

1)залить базовую структуру в GitHub (ветка main)

2)создаем новую ветку,или выделяем существующую для работы

3)пишем базу в новую ветку: "git add","git commit","git push"

4)на GitHub нажимаем на кнопку "PullRequest"(либо создаем его)

5)перекидываем ссылку Ментору

//TODO:Запуск и выполнение тестов(проверка кода на наличие ошибок с помощью теста)

1)переходим в нужный репозиторий

2)"go test" - команда,проверяющая наличие обязательных файлов и корректность выполнения описанной функции

//TODO:Линтеры(анализатор кода)

1)"go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest" - команда для установки "golangci" с помощью Go

2)"golangci-lint --version" - команда,проверяющая установлен ли "golangci"

3)"golangci-lint help linters" - команда,показывающая список поддерживаемых линтеров

4)"golangci-lint run ./..." - команда,которая проверит весь проект на наличие ошибок

//TODO:Модули("go.mod")(набор пакетов Go со встроенным управлением версиями,который можно опубликовать)
//система управления зависимостями
//зависимость - использование функций определенного пакета
//управление зависимостей(отслеживание версий импортируемых пакетов)
//модуль позволяет зафиксировать версию пакета, которую мы используем
1)создаем новый директорий

2)"go mod init" "имя модуля(github.com/we34ed/goblin)" - команда для создания модуля

3)"go mod" - файл,являющийся корнем управления зависимостями,в этом файле есть путь к модулю и версия Go

4)"go mod tidy" - команда,приводящая файл "go mod" к исходному коду модуля

//TODO:Пакеты

1)"go get" "ссылка с гитхаба на внешний пакет(github.com/go-chi/chi)"- команда для установки внешнего пакета из "GitHub"

2)импортированный пакет можно использовать в коде с помощью "import": "import(github.com/go-chi/chi)"
//этот пакет и версия добавятся в наш файл "go.mod"

//TODO:Документирование кода(справочный текст,сопровождающий код,как правило,в виде комментариев)
//"go doc" - утилита,генерирующая документацию для проекта на основе комментариев,работает как веб-сервис
1)"go install -v golang.org/x/tools/cmd/godoc@latest" - команда для установки утилиты "godoc"

2)"[]" - квадратные скобки создают ссылку на документацию

3)в документацию попадут только те комментарии,которые находятся ровно над элементом

4)"godoc -http=:8080" - команда для локального отображения godoc-документации
//по умолчанию на устройстве порт ":6060"
4.1)в браузере по адресу "http://localhost:8080" мы увидим документацию ко всем пакетам
//чтобы найти документацию к нашему пакету, листаем вниз к разделу "Third party"

//TODO:Отладчик программ(изучить в Gpt!)
//инструмент,помогающий искать и исправлять ошибки в коде
1)установка точек останова

2)изучение состояния программы

3)выполнение кода пошагово

4)отслеживание вызовов функций
